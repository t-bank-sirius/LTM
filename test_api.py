import requests
import time
from typing import Dict, Any, Optional
from datetime import datetime

class LTMClient:
    def __init__(self, base_url: str = "http://localhost:8006"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({"Content-Type": "application/json"})
    
    def health_check(self) -> bool:
        try:
            response = self.session.get(f"{self.base_url}/")
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è API: {e}")
            return False
    
    def store_memory(self, user_id: str, content: str, context: Optional[str] = None) -> Dict[str, Any]:
        data = {
            "user_id": user_id,
            "content": content
        }
        if context:
            data["context"] = context
        
        try:
            response = self.session.post(
                f"{self.base_url}/memory/store",
                json=data
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
            return {}
    
    def search_memory(self, user_id: str, query: str, limit: int = 5, min_score: float = 0.3) -> list:
        data = {
            "user_id": user_id,
            "query": query,
            "limit": limit,
            "min_score": min_score
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/search",
                json=data
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ø–∞–º—è—Ç–∏: {e}")
            return []

client = LTMClient()

def main():

    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API...")
    if not client.health_check():
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    user_id = "user"
    
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_id}'...")
    
    test_memories = [
        {
            "content": "–ò–∑—É—á–∏–ª –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(n log n)",
            "context": "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
        },
        {
            "content": "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–æ–º–∞—à–Ω–∏–π –±–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å–º–µ—Ç–∞–Ω–æ–π",
            "context": "–∫—É–ª–∏–Ω–∞—Ä–∏—è"
        },
        {
            "content": "–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ–∑–¥–∫—É –≤ –Ø–ø–æ–Ω–∏—é: –¢–æ–∫–∏–æ, –ö–∏–æ—Ç–æ, –≥–æ—Ä–∞ –§—É–¥–∑–∏",
            "context": "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
        },
        {
            "content": "–ü—Ä–æ—á–∏—Ç–∞–ª –∫–Ω–∏–≥—É '–ß–∏—Å—Ç—ã–π –∫–æ–¥' –†–æ–±–µ—Ä—Ç–∞ –ú–∞—Ä—Ç–∏–Ω–∞",
            "context": "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
        },
        {
            "content": "–ù–∞—É—á–∏–ª—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å –∏—Ç–∞–ª—å—è–Ω—Å–∫—É—é –ø–∞—Å—Ç—É –∫–∞—Ä–±–æ–Ω–∞—Ä–∞",
            "context": "–∫—É–ª–∏–Ω–∞—Ä–∏—è"
        }
    ]
    
    stored_count = 0
    for i, memory in enumerate(test_memories, 1):
        print(f"   üìù {i}/{len(test_memories)}: –°–æ—Ö—Ä–∞–Ω—è—é '{memory['content'][:40]}...'")
        result = client.store_memory(
            user_id=user_id,
            content=memory["content"],
            context=memory["context"]
        )
        if result and result.get("status") == "success":
            stored_count += 1
            print(f"      ‚úÖ ID: {result.get('memory_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        time.sleep(0.2) 
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stored_count}/{len(test_memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    search_queries = [
        ("–∞–ª–≥–æ—Ä–∏—Ç–º", "üîç –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"),
        ("–≥–æ—Ç–æ–≤–∏—Ç—å", "üç≥ –ü–æ–∏—Å–∫ –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏"),
        ("–ø–æ–µ–∑–¥–∫–∞", "‚úàÔ∏è –ü–æ–∏—Å–∫ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º"),
        ("–∫–Ω–∏–≥–∞", "üìö –ü–æ–∏—Å–∫ –ø–æ –∫–Ω–∏–≥–∞–º")
    ]
    
    all_memories = []
    
    for query, description in search_queries:
        print(f"\n{description}: '{query}'")
        results = client.search_memory(
            user_id=user_id,
            query=query,
            limit=3,
            min_score=0.1
        )
        
        if results:
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            for j, result in enumerate(results, 1):
                content = result.get('content', '')[:50]
                score = result.get('score', 0)
                context = result.get('context', '–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞')
                time_str = result.get('time', '–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   {j}. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f}")
                print(f"      üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}...")
                print(f"      üè∑Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
                print(f"      ‚è∞ –í—Ä–µ–º—è: {time_str}")
                all_memories.append(result)
        else:
            print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        time.sleep(0.3)
    

if __name__ == "__main__":
    main() 




print(client.store_memory(
    user_id="user",
    content="–ø–µ—Å–∏–∫ –ø–æ–º—ã–ª—Å—è",
    context="–ø–µ—Å–∏–∫"
))
print("--------------------------------")
print(client.search_memory(
    user_id="user",
    query="–¥—É—à",
    limit=10,
    min_score=0.1
))